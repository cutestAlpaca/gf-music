// ==========================================================================
// This is auto-generated by gf cli tool. You may not really want to edit it.
// ==========================================================================

package user

import (
	"database/sql"
	"github.com/gogf/gf/database/gdb"
)

// Entity is the golang structure for table user.
type Entity struct {
    Id            uint64 `orm:"id,primary"       json:"id"`              //                                                                                                                     
    UserName      string `orm:"user_name,unique" json:"user_name"`       // ç”¨æˆ·å                                                                                                         
    Mobile        string `orm:"mobile,unique"    json:"mobile"`          // ä¸­å›½æ‰‹æœºä¸å¸¦å›½å®¶ä»£ç ï¼Œå›½é™…æ‰‹æœºå·æ ¼å¼ä¸ºï¼šå›½å®¶ä»£ç -æ‰‹æœºå·  
    UserNickname  string `orm:"user_nickname"    json:"user_nickname"`   // ç”¨æˆ·æ˜µç§°                                                                                                 
    Birthday      int    `orm:"birthday"         json:"birthday"`        // ç”Ÿæ—¥                                                                                                           
    CreateTime    int    `orm:"create_time"      json:"create_time"`     // æ³¨å†Œæ—¶é—´                                                                                             
    UserPassword  string `orm:"user_password"    json:"user_password"`   // ç™»å½•å¯†ç ;cmf_passwordåŠ å¯†                                                                                 
    UserStatus    uint   `orm:"user_status"      json:"user_status"`     // ç”¨æˆ·çŠ¶æ€;0:ç¦ç”¨,1:æ­£å¸¸,2:æœªéªŒè¯                                                           
    UserEmail     string `orm:"user_email"       json:"user_email"`      // ç”¨æˆ·ç™»å½•é‚®ç®±                                                                                       
    Sex           int    `orm:"sex"              json:"sex"`             // æ€§åˆ«;0:ä¿å¯†,1:ç”·,2:å¥³                                                                                  
    Avatar        string `orm:"avatar"           json:"avatar"`          // ç”¨æˆ·å¤´åƒ                                                                                                   
    LastLoginTime int    `orm:"last_login_time"  json:"last_login_time"` // æœ€åŽç™»å½•æ—¶é—´                                                                                       
    LastLoginIp   string `orm:"last_login_ip"    json:"last_login_ip"`   // æœ€åŽç™»å½•ip                                                                                                 
    DeptId        uint64 `orm:"dept_id"          json:"dept_id"`         // éƒ¨é—¨id                                                                                                       
    Remark        string `orm:"remark"           json:"remark"`          // å¤‡æ³¨                                                                                                         
    IsAdmin       int    `orm:"is_admin"         json:"is_admin"`        // æ˜¯å¦åŽå°ç®¡ç†å‘˜ 1 æ˜¯  0   å¦                                                                              
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// InsertIgnore does "INSERT IGNORE INTO ..." statement for inserting current object into table.
func (r *Entity) InsertIgnore() (result sql.Result, err error) {
	return Model.Data(r).InsertIgnore()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Update() (result sql.Result, err error) {
	return Model.Data(r).Where(gdb.GetWhereConditionOfStruct(r)).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
func (r *Entity) Delete() (result sql.Result, err error) {
	return Model.Where(gdb.GetWhereConditionOfStruct(r)).Delete()
}