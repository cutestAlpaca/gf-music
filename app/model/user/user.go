// ============================================================================
// This is auto-generated by gf cli tool only once. Fill this file as you wish.
// ============================================================================

package user

import (
	"github.com/gogf/gf/os/gtime"
	"golang.org/x/crypto/bcrypt"
)

type User struct {
	Id         int         `orm:"id,primary"      json:"id"`          // 主键
	Uuid       string      `orm:"uuid"            json:"uuid"`        // UUID
	Username   string      `orm:"username,unique" json:"username"`    // 登录名
	Password   string      `orm:"password"        json:"password"`    // 密码
	Sex        int         `orm:"sex"             json:"sex"`         // 性别;0:保密,1:男,2:女
	Enable     int         `orm:"enable"          json:"enable"`      // 是否启用//radio/1,启用,2,禁用
	UpdateTime *gtime.Time `orm:"update_time"     json:"update_time"` // 更新时间
	CreateTime *gtime.Time `orm:"create_time"     json:"create_time"` // 创建时间
	CreateId   int         `orm:"create_id"       json:"create_id"`   // 创建者
	IsAdmin    int         `orm:"is_admin"        json:"is_admin"`    // 是否后台管理员 1 是  0   否
	Remark     string      `orm:"remark"          json:"remark"`      // 备注
	Avatar     string      `orm:"avatar"          json:"avatar"`      // 头像
	UserEmail  string      `orm:"user_email"      json:"user_email"`  // 用户邮箱
}

// RecordNotFound 根据条件判断数据是否存在
// 有数据返回false
// 没数据 true
func RecordNotFound(where ...interface{}) bool {
	return Model.RecordNotFound(where...)
}

func (m *arModel) RecordNotFound(where ...interface{}) bool {
	r, err := m.M.FindOne(where...)
	if r == nil && err == nil {
		return true
	}
	return false
}

// PasswordCheck 密码检查(工具类)
// false 校验失败
func (r *Entity) CompareHashAndPassword(password string) bool {
	if err := bcrypt.CompareHashAndPassword([]byte(r.Password), []byte(password)); err != nil {
		return false
	}
	return true
}

// EncryptedPassword: 加密密码(工具类)
func (r *Entity) EncryptedPassword() (err error) {
	if byTes, err := bcrypt.GenerateFromPassword([]byte(r.Password), bcrypt.DefaultCost); err == nil { // 加密密码
		r.Password = string(byTes)
		return nil
	}
	return err
}

func (r *Entity) ChangeAvatar(path string) {
	r.Avatar = path
}